@model IEnumerable<SAGM.Models.AllQuotes>


@{
    ViewData["Title"] = "Cotizaciones";
}

<style>
   select,  input[type="search"] {
        border: 1px solid gray;
        padding: .1em .1em;
        border-radius: .4em;
    }
</style>
<div class="container-fluid">
    <div class="card mt-2">
        <div class="card-header text-success bg-secondary bg-opacity-25">
            <i class="fa fa-file-invoice-dollar"></i><strong>Cotizaciones</strong>
            <a onclick="showInPopup('@Url.Action("AddQuote", "Quotes", new { id = "" }, Context.Request.Scheme)' , 'Crear cotización','bg-success')" class="btn btn-sm btn-outline-success" title="Crear cotización"><i class="fa fa-plus-circle"></i></a>
        </div>  
        <div class="card-body">
            <div id="view-all">
                <input type="hidden" id="Result" name="Result" value="@ViewBag.Result" />
                @await Html.PartialAsync("_ViewAllQuotes", Model)
            </div>
        </div>
    </div>
</div>

<partial name="_AddOrEditDialog" />
<partial name="_DeleteDialog" />
@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/js/showmodal.js"></script>
    <script type="text/javascript">
        var count = 0;
        var dataTable;
        function parseJsonDate(jsonDateString) {
            return new Date(parseInt(jsonDateString.replace('/Date(', '')));
        }
        $(document).ready(function () {
            if ($("#Result").val() == "true") {
                $.notify('@Html.Raw(ViewBag.Message)', "success", { globalPosition: "top left" });
            }
            else {
                $.notify('@Html.Raw(ViewBag.Message)', "error", { globalPosition: "top left" });
            }
            dataTable = $('#TableQuotes').DataTable(
                {
                    "language": {
                        "url": "/lib/datatables/Spanish.json"
                    },
                    "aLengthMenu": [
                        [25, 50, 100, 200, -1],
                        [25, 50, 100, 200, "Todos"]
                    ],
                    "columnDefs": [
                        {
                            "targets": 0,
                            className: 'dt-body-center'
                        },
                        {
                            "targets": [5, 6, 9, 10,11,12,14],
                            visible: false
                        },
                        {
                            "targets": [2, 3, 4, 5, 6, 7, 8],
                            "orderable": true,
                            className: 'dt-body-left'
                        },
                        {
                            "targets": [13],
                            className: 'dt-body-center'
                        },
                        {
                            "targets": 5,
                            "orderable": false,
                            className: 'dt-body-left'
                        }],
                    "columns": [
                        {
                            "className": 'details-control word-break:break-all',
                            "orderable": false,
                            "data": null,
                            "defaultContent": ''
                        },
                        { "data": "Id", "render": function (data) { count = count + 1; return count.toString(); } },
                        { "data": "QuoteName" },
                        { "data": "Customer.CustomerNickName" },
                        { "data": "FinalUserId" },
                        { "data": "BuyerContactId" },
                        {
                            "data": "QuoteDate",
                            "render":
                                function (data) {
                                    var date = new Date(data);
                                    var day = date.getDate();
                                    var month = date.getMonth()+1;
                                    var year = date.getFullYear();
                                    return year + "-" + (month.toString().length > 1 ? month : "0" + month) + "-" + (day.toString().length > 1 ? day : "0" + day);
                                }
                        },
                        {
                            "data": "validUntilDate",
                            "render":
                                function (data) {
                                    var date = new Date(data);
                                    var day = date.getDate();
                                    var month = date.getMonth() + 1;
                                    var year = date.getFullYear();
                                    return year + "-" + (month.toString().length > 1 ? month : "0" + month) + "-" + (day.toString().length > 1 ? day : "0" + day);
                                }
                        },
                        { "data": "Seller" },
                        { "data": "ModifyDate" },
                        { "data": "ModifiedBy" },
                        { "data": "CustomerPO" },
                        { "data": "Comments" },
                        { "data": "Active" },
                        { "data": "Tax" },
                        { "data": "QuoteStatusName" },
                        { "data": "Id" }
                    ]
                });
            $('#TableQuotes tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = dataTable.row(tr);

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                }
                else {
                    // Open this row
                    row.child(format(row.data())).show();
                    tr.addClass('shown');

                }
            });
            sc_deleteDialog.openModal('deleteItem', true, 'btnYesDelete', '/Users/Delete/', false);
        });

        function format(d) {

            var date = new Date(d.validUntilDate);
            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();
            var validuntil = year + "-" + (month.toString().length > 1 ? month : "0" + month) + "-" + (day.toString().length > 1 ? day : "0" + day);

            var modifydate = "NA";
            if (d.ModifyDate != "")
            {
                date = new Date(d.ModifyDate);
                day = date.getDate();
                month = date.getMonth() + 1;
                year = date.getFullYear();
                modifydate = year + "-" + (month.toString().length > 1 ? month : "0" + month) + "-" + (day.toString().length > 1 ? day : "0" + day);
            }

            var modifiedby = "NA";
            if (d.ModifiedBy != "")
            {
                modifiedby = d.ModifiedBy;
            }

            return (
                '<dl>' +
                '<dt>Vigencia:</dt>' +
                '<dd>' +
                validuntil +
                '</dd>' +
                '<dt>Modificó:</dt>' +
                '<dd>' +
                modifiedby +
                '</dd>' +
                '<dt>Fecha modificación:</dt>' +
                '<dd>' +
                 modifydate +
                '</dd>' +
                '<dt>Iva:</dt>' +
                '<dd>' +
                d.Tax +
                '</dd>' +
                '<dt>Comentarios:</dt>' +
                '<dd>' +
                d.Comments +
                '</dd>' +
                '</dl>'
            );
        }
    </script>
    }




